//장바구니----------------------------------
        //2-5. 장바구니
        public void Cart() {

            // 장바구니 -- no, 상품명, 가격 출력
            System.out.println();
            System.out.println("［장바구니］");
            System.out.println("-------------------------------------------------------------------------");
            System.out.printf("%-20s%-20s%-20s\n", "no", "상품명","가격");
            System.out.println("-------------------------------------------------------------------------");

            // cartlist 테이블에서 가져와서 출력해줌
            try {
                String sql =
                        "SELECT cart_id, item_name, price FROM cartlist a, member m Where a.user_id=m.user_id";

                // SELECT cart_id, item_name, price From cartlist;
                PreparedStatement pstmt = conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    CartlistDTO cartlistDTO = new CartlistDTO();

                    cartlistDTO.setCartId(rs.getInt("cart_id"));
                    cartlistDTO.setItemName(rs.getString("item_name"));
                    cartlistDTO.setPrice(rs.getInt("price"));

                    System.out.printf("%-20s%-20s%-20s\n",
                            cartlistDTO.getCartId(),
                            cartlistDTO.getItemName(),
                            cartlistDTO.getPrice());
                }
                rs.close();
                pstmt.close();
            } catch (SQLException e) {
                e.printStackTrace();

            }

            System.out.println("--------------------------------------------------------------------------------------------------");
            System.out.println("메뉴 : [1.전체상품구매(구매결정)] [2.장바구니에서 삭제] [9.뒤로가기]");
            System.out.print("메뉴 선택 :");
            String menuNo = scanner.nextLine();

            switch(menuNo){
                case "1" :
                    //전체상품구매(구매결정)
                    System.out.println("**구매결정**");
                    Purchase_before();
                    break;
                case "2" :
                    Cartlist_delete();
                    break;
                case "9" :
                    LoginPassMenu();
                    break;

            }


        }

        //2-5-1.구매결정(결제테이블)
        public void Purchase_before(){
            System.out.println();
            System.out.println("［구매결정］");
            System.out.println("-------------------------------------------------------------------------");
            System.out.printf("%-20s\n", "총금액");
            // 구매결정 테이블에 보여줄 목록 [총금액]
            System.out.println("-------------------------------------------------------------------------");

            // cartlist 테이블에서 가져와서 출력해줌
            try {
                String sql =
                        "SELECT SUM(price) AS `총금액` FROM cartlist a, member m Where a.user_id=m.user_id";
                // `총금액` 변경 시 cartlistDTO.setPrice(rs.getInt("총금액") columnLabel 도 같이 변경(필수)
                // cartlist, member테이블에서 아이디가 동일한걸 찾고 장바구니에 담겨있는 물품 가격 총금액을 출력;
                PreparedStatement pstmt = conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    CartlistDTO cartlistDTO = new CartlistDTO();

                    cartlistDTO.setPrice(rs.getInt("총금액"));

                    System.out.printf("%s\n",
                            cartlistDTO.getPrice());
                }
                rs.close();
                pstmt.close();
            } catch (SQLException e) {
                e.printStackTrace();

            }

            System.out.println("--------------------------------------------------------------------------------------------------");
            System.out.println("구매하시겠습니까? [1. 구매(결제)] [9.뒤로가기]");
            System.out.println("메뉴 선택 :");
            String menuNo = scanner.nextLine();

            switch (menuNo) {
                case "1":
                    //2-5-1-1.결제 이동
                    Purchase();
                    break;

                case "9":
                    Cart();
                    break;
            }

        }

        //2-5-1-1. 결제(인적사항 재확인)
        public void Purchase(){
            System.out.println();
            System.out.println("주문 전 주소와 전화번호를 확인해주세요");
            System.out.println("-------------------------------------------------------------------------");
            System.out.printf("%-20s%-20s\n", "주소", "전화번호");
            // 주문 전 주소, 전화번호 확인용으로 인적사항 재확인
            System.out.println("-------------------------------------------------------------------------");

            // cartlist 테이블에서 가져와서 출력해줌
            try {
                String sql =
                        "SELECT DISTINCT m.address, m.phone FROM cartlist a, member m WHERE a.user_id=m.user_id;";
                // `총금액` 변경 시 cartlistDTO.setPrice(rs.getInt("총금액") columnLabel 도 같이 변경(필수)
                // cartlist, member테이블에서 아이디가 동일한걸 찾고 장바구니에 담겨있는 물품 가격 총금액을 출력;
                PreparedStatement pstmt = conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                    MemberDTO memberDTO = new MemberDTO();

                    memberDTO.setAddress(rs.getString("address"));
                    memberDTO.setPhone(rs.getString("phone"));
                    System.out.printf("%-20s%-20s\n",
                            memberDTO.getAddress(),
                            memberDTO.getPhone());
                }
                rs.close();
                pstmt.close();
            }
            catch (SQLException e) {
                e.printStackTrace();

            }

            System.out.println();
            System.out.println("--------------------------------------------------------------------------------------------------");
            System.out.println("메뉴 : [1.확인] [2.주소/전화번호 변경] [9.뒤로 가기]");
            System.out.print("메뉴 선택 :");
            String menuNo = scanner.nextLine();

            switch (menuNo) {

                case "1":

                    //2-5-1-1-1. 확인 이동
                    try {
                        String sql =
                                "INSERT INTO purchase_list(user_id, item_name, price, order_date, phone) SELECT user_id, item_name, price, now(), phone FROM cartlist WHERE user_id = 'wisdomcho2'";

                        PreparedStatement pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, loggedInUserID);

                        pstmt.executeUpdate();
                        pstmt.close();


                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    Purchase_successful();
                    break;

                case "2":
                    //2-5-1-1-2. 주소/전화번호 변경
                    Alter_PurchaseInfo();
                    break;
                case "9":
                    //뒤로가기
                    Purchase_before();
                    break;
            }



        }

        //2-5-1-1-1. 확인
        public void Purchase_successful(){
            System.out.println();
            System.out.println("［주문이 완료되었습니다］");
            System.out.println(" ############## ");
            System.out.println(" 주문 리스트 ");
            System.out.println(" ############## ");

            System.out.println("-------------------------------------------------------------------------");
            System.out.printf("%-20s%-20s%-20s%-20s%-20s%-20s\n", "no", "상품명", "가격", "주문날짜", "주소", "전화번호");
            System.out.println("-------------------------------------------------------------------------");

            // 주문 리스트 출력
            try {
                String sql =
                        "SELECT p.purchase_no, p.item_name, p.price, p.order_date, m.address, p.phone\n" +
                                "FROM purchase_list p, member m;";

                PreparedStatement pstmt = conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {

                    Purchase_listDTO purchaseListDTO = new Purchase_listDTO();
                    MemberDTO memberDTO = new MemberDTO();

                    purchaseListDTO.setPurchaseNo(rs.getInt("purchase_no"));
                    purchaseListDTO.setItemName(rs.getString("item_name"));
                    purchaseListDTO.setPrice(rs.getInt("price"));
                    purchaseListDTO.setPurchaseDate(rs.getString("order_date"));
                    memberDTO.setAddress(rs.getString("address"));
                    purchaseListDTO.setPhone(rs.getString("phone"));
                    System.out.printf("%-20s%-20s%-20s%-20s%-20s%-20s\n",
                            purchaseListDTO.getPurchaseNo(),
                            purchaseListDTO.getItemName(),
                            purchaseListDTO.getPrice(),
                            purchaseListDTO.getPurchaseDate(),
                            memberDTO.getAddress(),
                            purchaseListDTO.getPhone());
                }

                rs.close();
                pstmt.close();

            } catch (SQLException e) {
                e.printStackTrace();

            }
            System.out.println("회원메뉴로 이동합니다");
            LoginPassMenu();
        }

        //2-5-1-1-2. 주소/전화번호 변경
        public void Alter_PurchaseInfo(){
            MemberDTO memberDto = new MemberDTO();
            System.out.println();
            System.out.println("주소/전화번호 변경");
            System.out.println("-----------------------------------------------------------------------------------");
            System.out.print("[주소 수정] :");
            memberDto.setAddress(scanner.nextLine());
            System.out.print("[전화번호 수정 ] : ");
            memberDto.setPhone(scanner.nextLine());
            System.out.println("-----------------------------------------------------------------------------------");

            try {
                String sql =
                        " UPDATE member\n" +
                                "SET address=? , phone = ? ";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, memberDto.getAddress());
                pstmt.setString(2, memberDto.getPhone());

                pstmt.executeUpdate();
                pstmt.close();
                System.out.println("수정 완료 되었습니다");
                Purchase();
            }
            catch(SQLException e){
                e.printStackTrace();
            }

        }

        //2-5-2. 장바구니에서 삭제
        public void Cartlist_delete (){

            int cartId=-1;
            while(cartId==-1){

            System.out.println();
            System.out.print("삭제할 상품번호 : ");
            try {
                cartId = Integer.parseInt(scanner.nextLine());
            }
            catch (Exception e) {
                 }
            }
            System.out.println("[item_name]을 삭제하시겠습니까?");
            System.out.println("[1.확인] [9.뒤로가기]");
            System.out.print("메뉴 선택 >");
            String menuNo = scanner.nextLine();

            switch (menuNo) {
                //1. 확인 클릭 시
                case "1":

                    try {
                        String sql = "DELETE FROM cartlist " +
                                "WHERE cart_id= ? ";

                        PreparedStatement pstmt = conn.prepareStatement(sql);
                        pstmt.setInt(1, cartId);
                        ResultSet rs = pstmt.executeQuery();
                        rs.close();
                        pstmt.close();


                    }

                    catch (SQLException e) {
                        e.printStackTrace();
                    }

                    System.out.println("---------------------------------------------");
                    System.out.println("[상품이 삭제되었습니다]");
                    System.out.println("---------------------------------------------");
                    Cart();
                    break;

                case "9":
                    Cart();
                    break;
            }









        }
        //장바구니 완료
